#!/usr/bin/env python3
import os
import sys
import click

from config import settings
from sarge import run

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


def _fail_loudly(sarge_obj):
    """
    Throw an exit(0) error when the return code from sarge runs command is
    not zero
    """
    if sarge_obj.returncode:
        sys.exit(1)


def _manage(command, args=''):
    """
    A helper that simplifies Django management command invocations
    """
    p = run('{}/manage.py {} {}'.format(BASE_DIR, command, args))
    _fail_loudly(p)


def _psql(query, no_sudo=False, is_file=False, postgresdb=False):
    """
    Dev only - used by the setup function below
    """
    sudo = 'sudo -u postgres'
    if no_sudo:
        sudo = ''

    dbflag=''

    if postgresdb:
        dbflag='-d postgres'

    if is_file:
        p = run('{} psql {} < {}'.format(sudo, dbflag, query))
    else:
        p = run('{} psql {} -c "{}"'.format(sudo, dbflag, query))

    _fail_loudly(p)


# @click.command()
# def deploy():
#     """
#     Build a package and upload it to the Slade 360 pip registry
#     """
#     p = run('python setup.py sdist upload -r slade')
#     _fail_loudly(p)


# @click.command()
# def deploy_ci():
#     """
#     Deploy a package in the Slade 360 pip registry from CircleCI
#     """
#     os.chdir('playbooks')
#     p = run('python deploy_ci.py backend --force')
#     _fail_loudly(p)


@click.command()
def reset(*args, **kwargs):
    """
    Drop and recreate the DB but do not load data. Migrations should run
    """
    no_sudo = True if 'no-sudo' in args else False

    db_name = settings.DATABASES.get('default').get('NAME')
    db_user = settings.DATABASES.get('default').get('USER')
    db_pass = settings.DATABASES.get('default').get('PASSWORD')

    _psql("DROP DATABASE IF EXISTS {}".format(db_name), no_sudo)
    _psql("DROP DATABASE IF EXISTS test_{}".format(db_name), no_sudo)
    _psql("DROP USER IF EXISTS {}".format(db_user), no_sudo)
    _psql("CREATE USER {0} WITH SUPERUSER CREATEDB "
          "CREATEROLE LOGIN PASSWORD '{1}'".format(db_user, db_pass), no_sudo)
    _psql('CREATE DATABASE {}'.format(db_name), no_sudo)

    _manage('migrate')


@click.command()
def load():
    """
    Loads the demo data during development
    """
    data_files = os.path.join(BASE_DIR, 'data/*/*.json')
    _manage('bootstrap', data_files)


@click.group(chain=True, invoke_without_command=True)
@click.pass_context
def setup(ctx):
    """
    Delete the development database, recreate it, load data
    """
    ctx.invoke(reset)


@click.command()
def server():
    """
    Run a development server, listen on port 8092
    """
    _manage('runserver', args='8092')


@click.group()
def cli():
    """
    Development helpers for the EMR project

    These utilities help with testing, loading of data, database resets etc
    """
    pass


cli.add_command(load)
cli.add_command(reset)
cli.add_command(setup)

if __name__ == '__main__':
    cli()
